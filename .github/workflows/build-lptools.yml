name: Build lptools
on:
  push:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      release:
        description: 'Push a new release'
        required: false
        default: 'false'
      version:
        description: 'Version'
        required: false
        default: 'lptools-25101900'

jobs:
  release:
    needs: [ Build-android, Build-on-linux, Build-on-macOS ]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/download-artifact@v4
        if: github.event.inputs.release == 'true' && github.event.inputs.release != 'false' && !cancelled()

      - name: Version
        if: github.event.inputs.release == 'true' && github.event.inputs.release != 'false' && !cancelled()
        run: |
          ARTIFACT_DIR=$(ls); for name in ${ARTIFACT_DIR}; do chmod +x ${name}/*; touch -c -d "2009-01-01 00:00:00" ${name}/*; zip -9 -jy "${name}.zip" ${name}/* > /dev/null 2>&1; done;
          ls -lahR

      - name: Upload release
        if: github.event.inputs.release == 'true' && github.event.inputs.release != 'false' && !cancelled()
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          omitBodyDuringUpdate: true
          removeArtifacts: true
          token: ${{ secrets.GITHUB_TOKEN }}
          name: ${{ github.event.inputs.version }}
          tag: ${{ github.event.inputs.version }}
          body: This release is built by github-action.
          artifacts: "*.zip"

  Build-android:
    runs-on: ubuntu-latest
    env:
      TZ: UTC-8
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"
      CCACHE_BASEDIR: "${{ github.workspace }}"

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'
          fetch-depth: 1

      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: "Android_${{ runner.os }}"
          restore-keys: "Android_${{ runner.os }}"

      - name: Build lptools
        run: |
          chmod a+x build.sh
          ./build.sh Android

      - name: Prepare artifact
        if: success()
        id: Artifact
        run: |
          echo "androidArmv8aDir=target/Android_arm64-v8a" >> $GITHUB_OUTPUT
          androidArm64v8aName=`ls -d target/Android_arm64-v8a/lptools-*/ | awk -F '(/|.zip)' '{print $3}'` && echo "androidArm64v8aName=$androidArm64v8aName" >> $GITHUB_OUTPUT

          echo "androidArmeabiv7Dir=target/Android_armeabi-v7a" >> $GITHUB_OUTPUT
          androidArmeabiv7aName=`ls -d target/Android_armeabi-v7a/lptools-*/ | awk -F '(/|.zip)' '{print $3}'` && echo "androidArmeabiv7aName=$androidArmeabiv7aName" >> $GITHUB_OUTPUT

          echo "androidX86x64Dir=target/Android_x86_64" >> $GITHUB_OUTPUT
          androidX86x64Name=`ls -d target/Android_x86_64/lptools-*/ | awk -F '(/|.zip)' '{print $3}'` && echo "androidX86x64Name=$androidX86x64Name" >> $GITHUB_OUTPUT

          echo "androidX86Dir=target/Android_x86" >> $GITHUB_OUTPUT
          androidX86Name=`ls -d target/Android_x86/lptools-*/ | awk -F '(/|.zip)' '{print $3}'` && echo "androidX86Name=$androidX86Name" >> $GITHUB_OUTPUT

      - name: Upload lptools Android_arm64-v8a
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.Artifact.outputs.androidArm64v8aName }}
          path: '${{ steps.Artifact.outputs.androidArmv8aDir }}/${{ steps.Artifact.outputs.androidArm64v8aName }}/*'

      - name: Upload lptools Android_armeabi-v7a
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.Artifact.outputs.androidArmeabiv7aName }}
          path: '${{ steps.Artifact.outputs.androidArmeabiv7Dir }}/${{ steps.Artifact.outputs.androidArmeabiv7aName }}/*'

      - name: Upload lptools Android_x86_64
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.Artifact.outputs.androidX86x64Name }}
          path: '${{ steps.Artifact.outputs.androidX86x64Dir }}/${{ steps.Artifact.outputs.androidX86x64Name }}/*'

      - name: Upload lptools Android_x86
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.Artifact.outputs.androidX86Name }}
          path: '${{ steps.Artifact.outputs.androidX86Dir }}/${{ steps.Artifact.outputs.androidX86Name }}/*'

  Build-on-linux:
    runs-on: ubuntu-latest
    env:
      TZ: UTC-8
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"
      CCACHE_BASEDIR: "${{ github.workspace }}"
      CUSTOM_CLANG_PATH: "/opt/clang"
      GCC_AARCH64_TOOLS_PATH: "/opt/gcc"
      LLVM_MINGW_PATH: "/opt/mingw"

    steps:
      - name: Setup clang+llvm
        run: |
          apt list --installed | grep -E "^clang-[0-9]" | cut -d"/" -f1 | xargs -i sudo apt remove --autoremove {}
          wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo tee /etc/apt/trusted.gpg.d/apt.llvm.org.asc
          echo "deb http://apt.llvm.org/$(lsb_release -sc)/ llvm-toolchain-$(lsb_release -sc) main" | sudo tee /etc/apt/sources.list.d/apt.llvm.org.list
          sudo apt update && sudo apt install clang llvm lld

      - name: Setup gcc-aarch64 tools
        run: |
          sudo apt update && sudo apt install cpp-14-aarch64-linux-gnu gcc-14-aarch64-linux-gnu g++-14-aarch64-linux-gnu

      - name: Setup llvm-mingw tools
        run: |
          wget https://github.com/mstorsjo/llvm-mingw/releases/download/20251007/llvm-mingw-20251007-ucrt-ubuntu-22.04-x86_64.tar.xz
          mkdir ${LLVM_MINGW_PATH}
          tar -xf llvm-mingw-20251007-ucrt-ubuntu-22.04-x86_64.tar.xz -C ${LLVM_MINGW_PATH}
          echo "LLVM_MINGW_PATH=${LLVM_MINGW_PATH}/llvm-mingw-20251007-ucrt-ubuntu-22.04-x86_64" >> $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'
          fetch-depth: 1

      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ runner.os }}
          restore-keys: ${{ runner.os }}

      - name: Build lptools
        run: |
          chmod a+x build.sh
          ./build.sh Linux

      - name: Prepare artifact
        if: success()
        id: Artifact
        run: |
          echo "linuxX86x64Dir=target/Linux_x86_64" >> $GITHUB_OUTPUT
          linuxX86x64Name=`ls -d target/Linux_x86_64/lptools-*/ | awk -F '(/|.zip)' '{print $3}'` && echo "linuxX86x64Name=$linuxX86x64Name" >> $GITHUB_OUTPUT

          echo "linuxAarch64Dir=target/Linux_aarch64" >> $GITHUB_OUTPUT
          linuxAarch64Name=`ls -d target/Linux_aarch64/lptools-*/ | awk -F '(/|.zip)' '{print $3}'` && echo "linuxAarch64Name=$linuxAarch64Name" >> $GITHUB_OUTPUT

          echo "windowsX86x64Dir=target/Windows_x86_64" >> $GITHUB_OUTPUT
          windowsX86x64Name=`ls -d target/Windows_x86_64/lptools-*/ | awk -F '(/|.zip)' '{print $3}'` && echo "windowsX86x64Name=$windowsX86x64Name" >> $GITHUB_OUTPUT

          echo "windowsAarch64Dir=target/Windows_aarch64" >> $GITHUB_OUTPUT
          windowsAarch64Name=`ls -d target/Windows_aarch64/lptools-*/ | awk -F '(/|.zip)' '{print $3}'` && echo "windowsAarch64Name=$windowsAarch64Name" >> $GITHUB_OUTPUT

      - name: Upload lptools Linux_x86_64
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.Artifact.outputs.linuxX86x64Name }}
          path: '${{ steps.Artifact.outputs.linuxX86x64Dir }}/${{ steps.Artifact.outputs.linuxX86x64Name }}/*'

      - name: Upload lptools Linux_aarch64
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.Artifact.outputs.linuxAarch64Name }}
          path: '${{ steps.Artifact.outputs.linuxAarch64Dir }}/${{ steps.Artifact.outputs.linuxAarch64Name }}/*'

      - name: Upload lptools Windows_x86_64
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.Artifact.outputs.windowsX86x64Name }}
          path: '${{ steps.Artifact.outputs.windowsX86x64Dir }}/${{ steps.Artifact.outputs.windowsX86x64Name }}/*'

      - name: Upload lptools Windows_aarch64
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.Artifact.outputs.windowsAarch64Name }}
          path: '${{ steps.Artifact.outputs.windowsAarch64Dir }}/${{ steps.Artifact.outputs.windowsAarch64Name }}/*'

  Build-on-macOS:
    runs-on: macos-latest
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"
      CCACHE_BASEDIR: "${{ github.workspace }}"

    steps:
      - name: Install dependencies
        run: brew install ccache

      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'
          fetch-depth: 1

      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ runner.os }}
          restore-keys: ${{ runner.os }}

      - name: Build lptools
        run: |
          chmod a+x build_darwin.sh
          ./build_darwin.sh

      - name: Prepare artifact
        if: success()
        id: prepareArtifact
        run: |
          echo "darwinX86x64Dir=target/Darwin_x86_64" >> $GITHUB_OUTPUT
          darwinX86x64Name=`ls -d target/Darwin_x86_64/lptools-*/ | awk -F '(/|.zip)' '{print $3}'` && echo "darwinX86x64Name=$darwinX86x64Name" >> $GITHUB_OUTPUT

          echo "darwinAarch64Dir=target/Darwin_aarch64" >> $GITHUB_OUTPUT
          darwinAarch64Name=`ls -d target/Darwin_aarch64/lptools-*/ | awk -F '(/|.zip)' '{print $3}'` && echo "darwinAarch64Name=$darwinAarch64Name" >> $GITHUB_OUTPUT

      - name: Upload lptools Darwin_x86_64
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.prepareArtifact.outputs.darwinX86x64Name }}
          path: '${{ steps.prepareArtifact.outputs.darwinX86x64Dir }}/${{ steps.prepareArtifact.outputs.darwinX86x64Name }}/*'

      - name: Upload lptools Darwin_aarch64
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.prepareArtifact.outputs.darwinAarch64Name }}
          path: '${{ steps.prepareArtifact.outputs.darwinAarch64Dir }}/${{ steps.prepareArtifact.outputs.darwinAarch64Name }}/*'
